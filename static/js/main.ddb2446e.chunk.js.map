{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","state","titleError","imgUrlError","imdbUrlError","imdbIdError","isValidForm","setState","trim","handleSubmitForm","props","onAddMovie","this","onSubmit","event","preventDefault","htmlFor","type","name","id","placeholder","autoComplete","required","value","onChange","target","Component","App","moviesFromServer","addMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddb2446e.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { Component } from 'react';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void,\n};\n\ntype State = {\n  title: string,\n  description: string,\n  imgUrl: string,\n  imdbUrl: string,\n  imdbId: string,\n  titleError: string,\n  imgUrlError: string,\n  imdbUrlError: string,\n  imdbIdError: string,\n};\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    titleError: '',\n    imgUrlError: '',\n    imdbUrlError: '',\n    imdbIdError: '',\n  };\n\n  isValidForm = () => {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    this.setState((state) => ({\n      title: state.title.trim(),\n      description: state.description.trim(),\n      imgUrl: state.imgUrl.trim(),\n      imdbUrl: state.imdbUrl.trim(),\n      imdbId: state.imdbId.trim(),\n    }));\n\n    if (!title.trim()) {\n      this.setState({ titleError: '*please input title' });\n    }\n\n    if (!imgUrl.trim()) {\n      this.setState({ imgUrlError: '*please input img url' });\n    }\n\n    if (!imdbUrl.trim()) {\n      this.setState({ imdbUrlError: '*please input imdb url' });\n    }\n\n    if (!imdbId.trim()) {\n      this.setState({ imdbIdError: '*please input title' });\n    }\n  };\n\n  handleSubmitForm = () => {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n\n    if (title.trim() && imdbUrl.trim() && imgUrl.trim() && imdbId.trim) {\n      this.props.onAddMovie({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n      this.setState({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        imdbUrlError: '',\n        imdbIdError: '',\n        imgUrlError: '',\n        titleError: '',\n      });\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      imdbUrlError,\n      imdbIdError,\n      imgUrlError,\n      titleError,\n    } = this.state;\n\n    return (\n      <form\n        className=\"movies__form-add\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          this.isValidForm();\n          this.handleSubmitForm();\n        }}\n      >\n        <label className=\"label\" htmlFor=\"title\">\n          Title:\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            className=\"input\"\n            placeholder=\"Write title...\"\n            autoComplete=\"off\"\n            required\n            value={title}\n            onChange={(event) => this.setState({\n              title: event.target.value,\n            })}\n          />\n\n          {titleError && (\n            <span className=\"has-text-danger\">{titleError}</span>\n          )}\n        </label>\n\n        <label className=\"label\" htmlFor=\"description\">\n          Description:\n          <textarea\n            name=\"description\"\n            id=\"description\"\n            className=\"textarea has-fixed-size\"\n            placeholder=\"Write description...\"\n            value={description}\n            onChange={(event) => this.setState({\n              description: event.target.value,\n            })}\n          />\n        </label>\n\n        <label className=\"label\" htmlFor=\"imgUrl\">\n          Img url:\n          <input\n            type=\"text\"\n            name=\"imgUrl\"\n            id=\"imgUrl\"\n            className=\"input\"\n            placeholder=\"Write img url...\"\n            autoComplete=\"off\"\n            required\n            value={imgUrl}\n            onChange={(event) => this.setState({\n              imgUrl: event.target.value,\n            })}\n          />\n\n          {imgUrlError && (\n            <span className=\"has-text-danger\">{imgUrlError}</span>\n          )}\n        </label>\n\n        <label className=\"label\" htmlFor=\"imdbUrl\">\n          Imd url:\n          <input\n            type=\"text\"\n            name=\"imdbUrl\"\n            id=\"imdbUrl\"\n            className=\"input\"\n            placeholder=\"Write imd url...\"\n            autoComplete=\"off\"\n            required\n            value={imdbUrl}\n            onChange={(event) => this.setState({\n              imdbUrl: event.target.value,\n            })}\n          />\n\n          {imdbUrlError && (\n            <span className=\"has-text-danger\">{imdbUrlError}</span>\n          )}\n        </label>\n\n        <label className=\"label\" htmlFor=\"imdbId\">\n          Imdb Id:\n          <input\n            type=\"text\"\n            name=\"imdbId\"\n            id=\"imdbId\"\n            className=\"input\"\n            placeholder=\"Write imdb Id...\"\n            autoComplete=\"off\"\n            required\n            value={imdbId}\n            onChange={(event) => this.setState({\n              imdbId: event.target.value,\n            })}\n          />\n\n          {imdbIdError && (\n            <span className=\"has-text-danger\">{imdbIdError}</span>\n          )}\n        </label>\n\n        <button\n          type=\"submit\"\n          className=\"button is-fullwidth is-rounded is-success\"\n        >\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie: Movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAddMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}